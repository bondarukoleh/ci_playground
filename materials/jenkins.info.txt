Jenkins is an open source continuous integration CI and continuous delivery tool written in Java.
It's an automation server used to build and deliver SW projects.
Was forked from another a-like server Hudson, after dispute or fight with Oracle.
It's cool to pack app in docker since it is isolated environment, and you can be more sure that your app works.
Major feature in Jenkins - plugins.

Jenkins is open source and well known but there are alternatives:
  - Self-hosted: Drone CI, TeamCity (by JetBrains)
  - Hosted (SaaS): Wercker, CircleCI, CodeShip, SemaphoreCI, Amazone AWS CI/CI tools.

Continuous Integration - is the practice of merging all developer working copies to a shared mainline several
times a day. Continuous Delivery - is the approach in which teams produce SW in short cycles, ensures that.
SW can be released in any moment. In practice CI/CD says that we will verify and publish SW by triggering
automated builds and test.

All developers push their changes to VCS where code tested at least once a day.
CI/CD with SDLC (SW development life cycle)
New Feature (by dev) ->
 Push (be dev) ->
  Build (by Jenkins) ->
   Test (Unit, Integration, Regression, Acceptance, etc) (by Jenkins) ->
    Release (Package SW, to tar, zip, jar, docker) (by Jenkins) ->
     :optional Distribute(to private storage/docker registry) ->
      Deploy to production(by Jenkins).

To install Jenkins with docker:
mkdir -p /var/jenkins_home
chown -R 1000:1000 /var/jenkins_home/
docker run -p 8080:8080 -p 50000:50000 -v /var/jenkins_home:/var/jenkins_home -d --name jenkins jenkins/jenkins:lts

We can make a jenkins with docker client, so jenkins container can run docker commands.

It's easy to setup Jenkins via UI. But there are several disadvantages of this approach:
- No audit trail, you'll never know who make a change, that break something.
- No history of changes, you don't know what was changed, that break something.
- No ability to easy backup or restore Jenkins setup.
- Usually developers don't have rights to change Jenkins setup, admins have, it takes time.

Many of those troubles will be solved if we will store Jenkins setup in Jenkins DSL, in VCS.

Jenkins Jobs
Job DSL - Jenkins plugin that allows to define jobs in programmatic way. It use Groovy based language
 Groovy - is like scripting language for Java platform, runs in JVM.
So we create a job in Jenkins that will be creating jobs with DSL.
We can download DSL scripts from repositories from Process Job DSLs Build block - but first 
  we need to approve using them. In Manage -> In-process Script Approval -> Approve

If node is node executable on jenkins, since all ls or copy or npm commands is looked in $PATH
we need to add npm to $PATH.
Easy way to find where npm is installed.
jenkins@$>npm start
bash: npm: command not found
jenkins@$>find ~ -name 'npm'
jenkins@$>export PATH=$PATH:/var/jenkins_home/tools/jenkins.plugins.nodejs.tools.NodeJSInstallation/nodejs/bin

As we can see from registryCredentials('dockerhub') in DSL script - there are id from credentials to
  dockerhub, to push builded docker. You can add it in Credentials (left menu, not in manage) ->
    Add -> and set ID - same as in script 'dockerhub'

Jenkins Pipelines
Allow you to write Jenkins build steps in code.
Build steps allow you to write: build (compile), test, deploy in code, mean you can put setup
for all of these steps - in VCS.
It's a way to automate SDLC.
Pipelines is a type of Jobs, we can do a huge "free style" Job and do same as in pipeline,
difference is in implementation in Jenkins.
Cool feature - is "Organization folder" - pipeline job that have separately diff repositories,
and you can logically divide build steps.

Pipeline can be created via UI or Job DSL (Jenkins DSL or Groovy script) 
Jenkins DSL will be interpreted by Groovy under the hood anyway.